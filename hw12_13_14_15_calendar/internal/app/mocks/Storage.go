// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	time "time"

	models "github.com/novikov-ai/practice-misc/hw12_13_14_15_calendar/internal/storage/models"
	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, event
func (_m *Storage) Add(ctx context.Context, event models.Event) (string, error) {
	ret := _m.Called(ctx, event) //nolint: typecheck

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, models.Event) string); ok {
		r0 = rf(ctx, event)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.Event) error); ok {
		r1 = rf(ctx, event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields: ctx
func (_m *Storage) Close(ctx context.Context) error {
	ret := _m.Called(ctx) //nolint: typecheck

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Connect provides a mock function with given fields: ctx
func (_m *Storage) Connect(ctx context.Context) error {
	ret := _m.Called(ctx) //nolint: typecheck

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, eventId
func (_m *Storage) Delete(ctx context.Context, eventId string) error {
	ret := _m.Called(ctx, eventId) //nolint: typecheck

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, eventId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetEventsForDay provides a mock function with given fields: ctx, day
func (_m *Storage) GetEventsForDay(ctx context.Context, day time.Time) []models.Event {
	ret := _m.Called(ctx, day) //nolint: typecheck

	var r0 []models.Event
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) []models.Event); ok {
		r0 = rf(ctx, day)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Event)
		}
	}

	return r0
}

// GetEventsForMonth provides a mock function with given fields: ctx, day
func (_m *Storage) GetEventsForMonth(ctx context.Context, day time.Time) []models.Event {
	ret := _m.Called(ctx, day) //nolint: typecheck

	var r0 []models.Event
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) []models.Event); ok {
		r0 = rf(ctx, day)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Event)
		}
	}

	return r0
}

// GetEventsForWeek provides a mock function with given fields: ctx, day
func (_m *Storage) GetEventsForWeek(ctx context.Context, day time.Time) []models.Event {
	ret := _m.Called(ctx, day) //nolint: typecheck

	var r0 []models.Event
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) []models.Event); ok {
		r0 = rf(ctx, day)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Event)
		}
	}

	return r0
}

// Update provides a mock function with given fields: ctx, eventId, updatedEvent
func (_m *Storage) Update(ctx context.Context, eventId string, updatedEvent models.Event) error {
	ret := _m.Called(ctx, eventId, updatedEvent) //nolint: typecheck

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.Event) error); ok {
		r0 = rf(ctx, eventId, updatedEvent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStorage(t mockConstructorTestingTNewStorage) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) }) //nolint: typecheck

	return mock
}
