package hw03frequencyanalysis

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

var taskWithAsteriskIsCompleted = true

var text = `Как видите, он  спускается  по  лестнице  вслед  за  своим
	другом   Кристофером   Робином,   головой   вниз,  пересчитывая
	ступеньки собственным затылком:  бум-бум-бум.  Другого  способа
	сходить  с  лестницы  он  пока  не  знает.  Иногда ему, правда,
		кажется, что можно бы найти какой-то другой способ, если бы  он
	только   мог   на  минутку  перестать  бумкать  и  как  следует
	сосредоточиться. Но увы - сосредоточиться-то ему и некогда.
		Как бы то ни было, вот он уже спустился  и  готов  с  вами
	познакомиться.
	- Винни-Пух. Очень приятно!
		Вас,  вероятно,  удивляет, почему его так странно зовут, а
	если вы знаете английский, то вы удивитесь еще больше.
		Это необыкновенное имя подарил ему Кристофер  Робин.  Надо
	вам  сказать,  что  когда-то Кристофер Робин был знаком с одним
	лебедем на пруду, которого он звал Пухом. Для лебедя  это  было
	очень   подходящее  имя,  потому  что  если  ты  зовешь  лебедя
	громко: "Пу-ух! Пу-ух!"- а он  не  откликается,  то  ты  всегда
	можешь  сделать вид, что ты просто понарошку стрелял; а если ты
	звал его тихо, то все подумают, что ты  просто  подул  себе  на
	нос.  Лебедь  потом  куда-то делся, а имя осталось, и Кристофер
	Робин решил отдать его своему медвежонку, чтобы оно не  пропало
	зря.
		А  Винни - так звали самую лучшую, самую добрую медведицу
	в  зоологическом  саду,  которую  очень-очень  любил  Кристофер
	Робин.  А  она  очень-очень  любила  его. Ее ли назвали Винни в
	честь Пуха, или Пуха назвали в ее честь - теперь уже никто  не
	знает,  даже папа Кристофера Робина. Когда-то он знал, а теперь
	забыл.
		Словом, теперь мишку зовут Винни-Пух, и вы знаете почему.
		Иногда Винни-Пух любит вечерком во что-нибудь поиграть,  а
	иногда,  особенно  когда  папа  дома,  он больше любит тихонько
	посидеть у огня и послушать какую-нибудь интересную сказку.
		В этот вечер...`

var textForLexicographicSort = `Го - регистрозависимый язык с полной поддержкой Юникода в строках и идентификаторах.
Идентификатор традиционно может быть любой непустой последовательностью, включающей буквы, цифры и знак подчёркивания, 
начинающийся с буквы и не совпадающий ни с одним из ключевых слов языка Го. При этом под «буквами» понимаются все 
символы Юникода, относящиеся к категориям «Lu» (буквы верхнего регистра), «Ll» (буквы нижнего регистра), «Lt» 
(заглавные), «Lm» (буквы-модификаторы) или «Lo» (прочие), под «цифрами» - все символы из категории «Nd» 
(числа, десятичные цифры). Таким образом, ничто не мешает использовать кириллицу.

Идентификаторы, различающиеся только регистром букв, являются различными. В языке существует ряд соглашений об 
использовании заглавных и строчных букв. В именах пакетов используются только строчные буквы. Все ключевые слова Го 
пишутся в нижнем регистре. Переменные, начинающиеся с заглавных букв, являются экспортируемыми (public), а начинающиеся 
со строчных букв - неэкспортируемыми (private).

Основные возможности языка:
- Го - язык со строгой статической типизацией. Доступен автоматический вывод типов, для пользовательских типов - 
«утиная типизация». 
- Строковый тип со встроенной поддержкой юникода.

Под статической типизацией (на Го) понимают, что все переменные имеют определенный тип заданный при инициализации
и он не может быть изменен позже.

Первая версия Юникода представляла собой кодировку с фиксированным размером символа... 

Без юникода сложно представить современное программирование.

Не все, кто начинает программировать, способен оценить значимость регистра определенных символов. При работе со строками
не забывайте приводить текст в нужное состояние регистра. Помните важность значения регистра?!

Со знанием приходит понимание. 

Яблоки содержатся витамины от А до Е. Яблоки богаты такими микроэлементами как: также магний, фосфор, йод, 
железо, селен, калий, кальций, цинк. Яблоки придают нам жизненных сил, яблоки способствуют противодействию стрессу, 
улучшают работу мозга, укрепляют сердечно-сосудистую систему. Ешьте яблоки!
`

func TestTop10(t *testing.T) {
	t.Run("no words in empty string", func(t *testing.T) {
		require.Len(t, Top10(""), 0)
	})

	t.Run("positive test", func(t *testing.T) {
		if taskWithAsteriskIsCompleted {
			expected := []string{
				"а",         // 8
				"он",        // 8
				"и",         // 6
				"ты",        // 5
				"что",       // 5
				"в",         // 4
				"его",       // 4
				"если",      // 4
				"кристофер", // 4
				"не",        // 4
			}
			require.Equal(t, expected, Top10(text))
		} else {
			expected := []string{
				"он",        // 8
				"а",         // 6
				"и",         // 6
				"ты",        // 5
				"что",       // 5
				"-",         // 4
				"Кристофер", // 4
				"если",      // 4
				"не",        // 4
				"то",        // 4
			}
			require.Equal(t, expected, Top10(text))
		}
	})
}

func TestLexicographicSortEqualRepetition(t *testing.T) {
	t.Run("lexicographic sorting with equal words repetition", func(t *testing.T) {
		expected := []string{
			"буквы",    // 5
			"в",        // 5
			"все",      // 5
			"го",       // 5
			"и",        // 5
			"не",       // 5
			"регистра", // 5
			"с",        // 5
			"со",       // 5
			"юникода",  // 5
		}

		require.Equal(t, expected, Top10(textForLexicographicSort))
	})
}

func TestPunctuationIgnorance(t *testing.T) {
	input := `Восклицание?! восклицание!? {скобки} (скобки) [скобки] запятая, многоточие...
успех! провал( точка-запятая;
пунктуация отсутствует тут`

	t.Run("common punctuation symbols", func(t *testing.T) {
		assert.Equal(t, Top10(input), []string{
			"скобки",        // 3
			"восклицание",   // 2
			"запятая",       // 1
			"многоточие",    // 1
			"отсутствует",   // 1
			"провал",        // 1
			"пунктуация",    // 1
			"точка-запятая", // 1
			"тут",           // 1
			"успех",         // 1
		})
	})
}
